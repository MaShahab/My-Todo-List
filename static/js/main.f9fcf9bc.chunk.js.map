{"version":3,"sources":["images/amc_loading.gif","images/x-button.png","components/AddTodoComponent.js","components/ToggleTodoComponent.js","components/ShowingComponent.js","components/DeleteTodoComponent.js","components/ReducerTodoComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddTodo","addTodo","value","type","todoText","myTime","Date","isCheck","todoId","now","isVisible","Component","ToggleTodo","toggleTodo","id","Showing","showAll","showOngoing","showCompleted","DeleteTodo","deleteTodo","deleteAllCompleted","ReducerTodo","todoreducer","state","action","ADD_TODO","TOGGLE_TODO","SHOW_ALL","SHOW_ONGOING","SHOW_COMPLETED","DELETE_TODO","allItems","makeItVisible","map","item","activeList","completedList","totalList","filter","Main","React","Provider","ReactRedux","createStore","Redux","combineReducers","myAddTodo","myToggleTodo","showingTodo","showALL","deletemyTodo","allReducers","Todo","props","handleChange","e","target","setState","handleKeyUp","key","trim","length","dispatch","handleSubmit","handleClearIcon","handleCheckboxClick","handleDeletClick","console","log","window","confirm","deleteCompletedItems","element","document","getElementsByClassName","parentNode","remove","newDate","dateList","i","push","toLocaleTimeString","ownTime","this","todos","visibleElements","Promise","resolve","reject","setTimeout","then","a","getElementById","style","transition","opacity","zIndex","Fragment","src","loadingProgress","alt","className","onChange","onKeyUp","bind","onClick","index","defaultChecked","role","DeleteIcon","name","disabled","for","TodoApp","store","ReactDOM","render","App","Boolean","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9fcf9bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/amc_loading.0b9309cf.gif\";","module.exports = __webpack_public_path__ + \"static/media/x-button.cfff30b6.png\";","import React,{Component} from 'react'\r\n\r\nexport default class AddTodo extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    addTodo = (value) => {\r\n        const ADD_TODO = 'ADD_TODO';\r\n        return {\r\n            type: ADD_TODO,\r\n            todoText: value,\r\n            myTime : new Date(),\r\n            isCheck: false,\r\n            todoId: Date.now(),\r\n            isVisible: true\r\n        }\r\n    };\r\n}","import React,{Component} from 'react'\r\n\r\nexport default class ToggleTodo extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toggleTodo = (id) => {\r\n        const TOGGLE_TODO = 'TOGGLE_TODO';\r\n        return {\r\n            type: TOGGLE_TODO,\r\n            todoId: id\r\n        }\r\n    };\r\n}","import React,{Component} from 'react'\r\n\r\nexport default class Showing extends Component{\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    showAll = () => {\r\n        const SHOW_ALL = 'SHOW_ALL';\r\n        return {\r\n            type: SHOW_ALL\r\n        }\r\n    };\r\n    showOngoing = () => {\r\n        const SHOW_ONGOING = 'SHOW_ONGOING';\r\n        return {\r\n            type: SHOW_ONGOING\r\n        }\r\n    };\r\n    showCompleted = () => {\r\n        const SHOW_COMPLETED = 'SHOW_COMPLETED';\r\n        return {\r\n            type: SHOW_COMPLETED\r\n        }\r\n    };\r\n}","import React,{Component} from 'react'\r\n\r\nexport default class DeleteTodo extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    deleteTodo = (id) => {\r\n        const DELETE_TODO = 'DELETE_TODO';\r\n        return {\r\n            type: DELETE_TODO,\r\n            todoId: id\r\n        }\r\n    };\r\n\r\n    deleteAllCompleted = () => {\r\n        const DELETE_TODO = 'DELETE_COMPLETED_TODO';\r\n        return {\r\n            type: DELETE_TODO,\r\n            todoId: []\r\n        }\r\n    };\r\n}","import React, {Component} from 'react'\r\n\r\nexport default class ReducerTodo extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    todoreducer = (state = [], action) => {\r\n\r\n        const ADD_TODO = 'ADD_TODO';\r\n        const TOGGLE_TODO = 'TOGGLE_TODO';\r\n        const SHOW_ALL = 'SHOW_ALL';\r\n        const SHOW_ONGOING = 'SHOW_ONGOING';\r\n        const SHOW_COMPLETED = 'SHOW_COMPLETED';\r\n        const DELETE_TODO = 'DELETE_TODO';\r\n\r\n        switch (action.type) {\r\n            case ADD_TODO:\r\n                const allItems = [\r\n                    ...state, {\r\n                        todoText: action.todoText,\r\n                        isCheck: action.isCheck,\r\n                        myTime : new Date(),\r\n                        todoId: action.todoId,\r\n                        isVisible: action.isVisible\r\n                    }\r\n                ];\r\n                const makeItVisible = allItems.map(item => {\r\n                    return {...item, isVisible: true}\r\n                });\r\n                return makeItVisible\r\n            case TOGGLE_TODO:\r\n                return (\r\n                    state.map((item) => {\r\n                        return (\r\n                            (item.todoId === action.todoId)\r\n                                ?\r\n                                {...item, isCheck: !item.isCheck}\r\n                                :\r\n                                item\r\n                        )\r\n                    }));\r\n            case SHOW_ONGOING:\r\n                const activeList = state.map((item) => {\r\n                    return (\r\n                        (item.isCheck)\r\n                            ?\r\n                            {...item, isVisible: false}\r\n                            :\r\n                            {...item, isVisible: true}\r\n                    )\r\n                });\r\n                return activeList;\r\n            case SHOW_COMPLETED:\r\n                const completedList = state.map((item) => {\r\n                    return (\r\n                        (!item.isCheck)\r\n                            ?\r\n                            {...item, isVisible: false}\r\n                            :\r\n                            {...item, isVisible: true}\r\n                    )\r\n                });\r\n                return completedList;\r\n\r\n            case SHOW_ALL:\r\n                const totalList = state.map((item) => {\r\n                    return (\r\n                        {...item, isVisible: true}\r\n                    )\r\n                })\r\n                return totalList;\r\n\r\n            case DELETE_TODO:\r\n                return state.filter(item => item.todoId !== action.todoId);\r\n            // return wholeList\r\n            default:\r\n                return state\r\n        }\r\n    };\r\n}","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport \"../Styles/MainCSS.css\"\r\nimport * as ReactRedux from \"react-redux\";\r\nimport * as Redux from 'redux'\r\nimport ReactDOM from 'react-dom';\r\nimport AddTodo from \"../components/AddTodoComponent\";\r\nimport ToggleTodo from \"../components/ToggleTodoComponent\";\r\nimport Showing from \"../components/ShowingComponent\";\r\nimport DeleteTodo from \"../components/DeleteTodoComponent\";\r\nimport ReducerTodo from \"../components/ReducerTodoComponent\";\r\n// import {observer} from \"mobx-react\";\r\nimport loadingProgress from \"../images/amc_loading.gif\"\r\nimport DeleteIcon from \"../images/x-button.png\"\r\n// import myStore from \"../store\";\r\n\r\n// @observer\r\nclass Main extends Component {\r\n    render() {\r\n\r\n        const {Component} = React;\r\n        const {Provider} = ReactRedux;\r\n        const {createStore, combineReducers} = Redux;\r\n\r\n        const ADD_TODO = 'ADD_TODO';\r\n        const TOGGLE_TODO = 'TOGGLE_TODO';\r\n        const SHOW_ALL = 'SHOW_ALL';\r\n        const SHOW_ONGOING = 'SHOW_ONGOING';\r\n        const SHOW_COMPLETED = 'SHOW_COMPLETED';\r\n        const DELETE_TODO = 'DELETE_TODO';\r\n\r\n        let addtodo = new AddTodo();\r\n        let myAddTodo = addtodo.addTodo;\r\n\r\n\r\n        let toggletodo = new ToggleTodo();\r\n        let myToggleTodo = toggletodo.toggleTodo;\r\n\r\n        let showingTodo = new Showing();\r\n        let showALL = showingTodo.showAll;\r\n        let showOngoing = showingTodo.showOngoing;\r\n        let showCompleted = showingTodo.showCompleted;\r\n\r\n        let deleteTodos = new DeleteTodo();\r\n        let deletemyTodo = deleteTodos.deleteTodo;\r\n\r\n        let deleteCompleted = new DeleteTodo();\r\n        let deleteMyCompleted = deleteCompleted.deleteAllCompleted;\r\n\r\n        let todoReducer = new ReducerTodo();\r\n        let newtodoReducer = todoReducer.todoreducer;\r\n        const todoreducer = (state = [], action) => {\r\n            switch (action.type) {\r\n                case ADD_TODO:\r\n                    const allItems = [\r\n                        ...state, {\r\n                            todoText: action.todoText,\r\n                            isCheck: action.isCheck,\r\n                            myTime : new Date(),\r\n                            todoId: action.todoId,\r\n                            isVisible: action.isVisible\r\n                        }\r\n                    ];\r\n                    const makeItVisible = allItems.map(item => {\r\n                        return {...item, isVisible: true}\r\n                    });\r\n                    return makeItVisible\r\n                case TOGGLE_TODO:\r\n                    return (\r\n                        state.map((item) => {\r\n                            return (\r\n                                (item.todoId === action.todoId)\r\n                                    ?\r\n                                    {...item, isCheck: !item.isCheck}\r\n                                    :\r\n                                    item\r\n                            )\r\n                        }));\r\n                case SHOW_ONGOING:\r\n                    const activeList = state.map((item) => {\r\n                        return (\r\n                            (item.isCheck)\r\n                                ?\r\n                                {...item, isVisible: false}\r\n                                :\r\n                                {...item, isVisible: true}\r\n                        )\r\n                    });\r\n                    return activeList;\r\n                case SHOW_COMPLETED:\r\n                    const completedList = state.map((item) => {\r\n                        return (\r\n                            (!item.isCheck)\r\n                                ?\r\n                                {...item, isVisible: false}\r\n                                :\r\n                                {...item, isVisible: true}\r\n                        )\r\n                    });\r\n                    return completedList;\r\n\r\n                case SHOW_ALL:\r\n                    const totalList = state.map((item) => {\r\n                        return (\r\n                            {...item, isVisible: true}\r\n                        )\r\n                    })\r\n                    return totalList;\r\n\r\n                case DELETE_TODO:\r\n                    return state.filter(item => item.todoId !== action.todoId)\r\n                // return wholeList\r\n                default:\r\n                    return state\r\n            }\r\n        };\r\n\r\n        const allReducers = combineReducers({todoreducer});\r\n\r\n        // @observer\r\n        class Todo extends React.Component {\r\n            constructor(props) {\r\n                super(props);\r\n                this.state = {\r\n                    value: ''\r\n                };\r\n                this.ownTime = new Date();\r\n            }\r\n\r\n            handleChange = (e) => {\r\n                const value = e.target.value;\r\n                this.setState({\r\n                    value\r\n                })\r\n            };\r\n\r\n            handleKeyUp = (value, e) => {\r\n                if (e.key === 'Enter') {\r\n                    this.state.value.trim().length &&\r\n                    this.props.dispatch(myAddTodo(value));\r\n\r\n                    this.setState({\r\n                        value: ''\r\n                    })\r\n                }\r\n            };\r\n\r\n            handleSubmit = (value) => {\r\n                this.state.value.trim().length &&\r\n                this.props.dispatch(myAddTodo(value));\r\n\r\n                this.setState({\r\n                    value: ''\r\n                })\r\n            };\r\n\r\n            handleClearIcon = () => {\r\n                this.setState({\r\n                    value: ''\r\n                })\r\n            };\r\n\r\n\r\n            handleCheckboxClick = (id) => {\r\n                this.props.dispatch(myToggleTodo(id));\r\n            };\r\n\r\n            showOngoing = () => {\r\n                this.props.dispatch(showOngoing());\r\n            };\r\n\r\n            showCompleted = () => {\r\n                this.props.dispatch(showCompleted());\r\n            };\r\n\r\n            showAll = () => {\r\n                this.props.dispatch(showALL());\r\n            };\r\n\r\n            handleDeletClick = (id) => {\r\n                console.log(\"delete\");\r\n                var answer = window.confirm(\"Are you sure you want to remove this item ?\");\r\n                if (answer) {\r\n                    this.props.dispatch(deletemyTodo(id));\r\n                }\r\n                else {\r\n                    return\r\n                }\r\n            };\r\n\r\n            deleteCompletedItems = () => {\r\n\r\n                // this.props.dispatch(deletemyTodo());\r\n\r\n                var answer = window.confirm(\"Are you sure you want to delete all completed Todos?\");\r\n                if (answer) {\r\n                    var element = document.getElementsByClassName(\"line-through\");\r\n                    while(element.length > 0){\r\n                        element[0].parentNode.remove(element[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    return\r\n                }\r\n            };\r\n\r\n            render() {\r\n                const value = this.state.value;\r\n                const todos = this.props.todos;\r\n                const visibleElements = todos.filter(item => item.isVisible);\r\n\r\n                let p = new Promise((resolve , reject) =>{\r\n                    setTimeout(() =>{\r\n                        resolve()\r\n                    },1000)\r\n                });\r\n\r\n                p.then( ()=>{\r\n                    console.log(\"salam\");\r\n                    let a = document.getElementById(\"loading_division\");\r\n                    // a.style.cssText = \"transition: all 2s; display: none\";\r\n                    a.style.transition=\"opacity 1s\";\r\n                    a.style.opacity=\"0\";\r\n\r\n                    let b = document.getElementById(\"loading_division\");\r\n                    b.style.zIndex=\"-1\";\r\n                });\r\n\r\n                return (\r\n                    <React.Fragment>\r\n\r\n\r\n                        <h1></h1>\r\n                        <div id=\"loading_division\">\r\n                            <img src={loadingProgress} id=\"loading\" alt=\"sdfds\"/>\r\n                        </div>\r\n\r\n\r\n                        <h1>Todo List</h1>\r\n                        <div className=\"todo-container\">\r\n                            <div className='inputFields'>\r\n                                <input\r\n                                    className='inputs'\r\n                                    type='text'\r\n                                    value={value}\r\n                                    onChange={this.handleChange}\r\n                                    onKeyUp={this.handleKeyUp.bind(this, value)}/>\r\n                                <span\r\n                                    className={`input-clear-icon ${value !== '' ? 'clear-icon--show' : ''} `}\r\n                                    onClick={this.handleClearIcon}> X\r\n            </span>\r\n                            </div>\r\n                            <button\r\n                                className='btn'\r\n                                type='button'\r\n                                onClick={this.handleSubmit.bind(this, value)}>Submit\r\n                            </button>\r\n                        </div>\r\n\r\n                        {\r\n\r\n                            visibleElements.length > 0 &&\r\n                            <ul className='list'>\r\n                                {\r\n                                    todos.map((item, index) => {\r\n                                        return (\r\n\r\n                                            item.isVisible &&\r\n                                            <li\r\n                                                className='list-item'\r\n                                                key={item.todoId}>\r\n                                                <label\r\n                                                    className={`list-label ${item.isCheck ? 'line-through' : ''}`}>\r\n\r\n                                                    <input\r\n                                                        id=\"itemCheckbox\"\r\n                                                        defaultChecked={item.isCheck}\r\n                                                        type='checkbox'\r\n                                                        onClick={this.handleCheckboxClick.bind(this, item.todoId)}/>\r\n                                                    <span id=\"todoText\">{item.todoText}</span>\r\n                                                    <span id=\"time\">{item.myTime.toLocaleTimeString()}</span>\r\n                                                </label>\r\n\r\n                                                {/*<button onClick={()=>myStore.stopTime()}>pause</button>*/}\r\n                                                {/*<button>resume</button>*/}\r\n\r\n                                                <span className='delete-btn' role='button'\r\n                                                      onClick={this.handleDeletClick.bind(this, item.todoId)}><img className=\"delete_icon\" src={DeleteIcon}/> </span>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        }\r\n                        {\r\n                            todos.length === 0 ? <p>TODO list is empty</p> : (visibleElements.length === 0 ?\r\n                                <p>No results found for this filter</p> : '')\r\n                        }\r\n                        <div className='filter-container'>Filters:\r\n                            <input type='radio' name='filter' id='allFilter' className='filter-input'\r\n                                   onClick={this.showAll} disabled={todos.length === 0}/><label for='allFilter'\r\n                                                                                                className='filter-label'>All</label>\r\n\r\n                            <input type='radio' name='filter' id='activeFilter' className='filter-input'\r\n                                   onClick={this.showOngoing} disabled={todos.length === 0}/><label for='activeFilter'\r\n                                                                                                    className='filter-label'>Active</label>\r\n\r\n                            <input type='radio' name='filter' id='completedFilter' className='filter-input'\r\n                                   onClick={this.showCompleted} disabled={todos.length === 0}/><label\r\n                                for='completedFilter' className='filter-label'>Completed</label>\r\n\r\n                            <input type='radio' name='filter' id='removeCompleted' className='filter-input'\r\n                                   onClick={this.deleteCompletedItems} disabled={todos.length === 0}/><label\r\n                                for='removeCompleted' className='filter-label'>Remove Completed</label>\r\n                        </div>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            newDate = () =>{\r\n                let dateList = [];\r\n                let i = new Date();\r\n                dateList.push(i.toLocaleTimeString());\r\n                console.log(dateList)\r\n                // document.write(dateList[0])\r\n            };\r\n        }\r\n\r\n        const mapStateToProps = (state) => {\r\n            return {\r\n                todos: state.todoreducer\r\n            }\r\n        };\r\n\r\n        const TodoApp = ReactRedux.connect(mapStateToProps)(Todo);\r\n        const store = createStore(allReducers);\r\n\r\n        ReactDOM.render(\r\n            <Provider store={store}>\r\n                <TodoApp/>\r\n            </Provider>,\r\n            document.getElementById('root')\r\n        );\r\n\r\n\r\n        return (\r\n            <div id=\"main_division\">\r\n                <div className=\"container\">\r\n                    <div id=\"root\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport '../src/Styles/MainCSS.css'\nimport Main from \"./components/MainComponent\";\n\n\nclass App extends Component {\n    render() {\n        return(\n            <div>\n                <Main/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}